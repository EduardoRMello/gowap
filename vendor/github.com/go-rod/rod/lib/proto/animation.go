// This file is generated by "./lib/proto/generate"

package proto

/*

Animation

*/

// AnimationAnimationType enum
type AnimationAnimationType string

const (
	// AnimationAnimationTypeCSSTransition enum const
	AnimationAnimationTypeCSSTransition AnimationAnimationType = "CSSTransition"

	// AnimationAnimationTypeCSSAnimation enum const
	AnimationAnimationTypeCSSAnimation AnimationAnimationType = "CSSAnimation"

	// AnimationAnimationTypeWebAnimation enum const
	AnimationAnimationTypeWebAnimation AnimationAnimationType = "WebAnimation"
)

// AnimationAnimation Animation instance.
type AnimationAnimation struct {

	// ID `Animation`'s id.
	ID string `json:"id"`

	// Name `Animation`'s name.
	Name string `json:"name"`

	// PausedState `Animation`'s internal paused state.
	PausedState bool `json:"pausedState"`

	// PlayState `Animation`'s play state.
	PlayState string `json:"playState"`

	// PlaybackRate `Animation`'s playback rate.
	PlaybackRate float64 `json:"playbackRate"`

	// StartTime `Animation`'s start time.
	StartTime float64 `json:"startTime"`

	// CurrentTime `Animation`'s current time.
	CurrentTime float64 `json:"currentTime"`

	// Type Animation type of `Animation`.
	Type AnimationAnimationType `json:"type"`

	// Source (optional) `Animation`'s source animation node.
	Source *AnimationAnimationEffect `json:"source,omitempty"`

	// CSSID (optional) A unique ID for `Animation` representing the sources that triggered this CSS
	// animation/transition.
	CSSID string `json:"cssId,omitempty"`
}

// AnimationAnimationEffect AnimationEffect instance
type AnimationAnimationEffect struct {

	// Delay `AnimationEffect`'s delay.
	Delay float64 `json:"delay"`

	// EndDelay `AnimationEffect`'s end delay.
	EndDelay float64 `json:"endDelay"`

	// IterationStart `AnimationEffect`'s iteration start.
	IterationStart float64 `json:"iterationStart"`

	// Iterations `AnimationEffect`'s iterations.
	Iterations float64 `json:"iterations"`

	// Duration `AnimationEffect`'s iteration duration.
	Duration float64 `json:"duration"`

	// Direction `AnimationEffect`'s playback direction.
	Direction string `json:"direction"`

	// Fill `AnimationEffect`'s fill mode.
	Fill string `json:"fill"`

	// BackendNodeID (optional) `AnimationEffect`'s target node.
	BackendNodeID DOMBackendNodeID `json:"backendNodeId,omitempty"`

	// KeyframesRule (optional) `AnimationEffect`'s keyframes.
	KeyframesRule *AnimationKeyframesRule `json:"keyframesRule,omitempty"`

	// Easing `AnimationEffect`'s timing function.
	Easing string `json:"easing"`
}

// AnimationKeyframesRule Keyframes Rule
type AnimationKeyframesRule struct {

	// Name (optional) CSS keyframed animation's name.
	Name string `json:"name,omitempty"`

	// Keyframes List of animation keyframes.
	Keyframes []*AnimationKeyframeStyle `json:"keyframes"`
}

// AnimationKeyframeStyle Keyframe Style
type AnimationKeyframeStyle struct {

	// Offset Keyframe's time offset.
	Offset string `json:"offset"`

	// Easing `AnimationEffect`'s timing function.
	Easing string `json:"easing"`
}

// AnimationDisable Disables animation domain notifications.
type AnimationDisable struct {
}

// ProtoReq of the command
func (m AnimationDisable) ProtoReq() string { return "Animation.disable" }

// Call of the command, sessionID is optional.
func (m AnimationDisable) Call(c Client) error {
	return call(m.ProtoReq(), m, nil, c)
}

// AnimationEnable Enables animation domain notifications.
type AnimationEnable struct {
}

// ProtoReq of the command
func (m AnimationEnable) ProtoReq() string { return "Animation.enable" }

// Call of the command, sessionID is optional.
func (m AnimationEnable) Call(c Client) error {
	return call(m.ProtoReq(), m, nil, c)
}

// AnimationGetCurrentTime Returns the current time of the an animation.
type AnimationGetCurrentTime struct {

	// ID Id of animation.
	ID string `json:"id"`
}

// ProtoReq of the command
func (m AnimationGetCurrentTime) ProtoReq() string { return "Animation.getCurrentTime" }

// Call of the command, sessionID is optional.
func (m AnimationGetCurrentTime) Call(c Client) (*AnimationGetCurrentTimeResult, error) {
	var res AnimationGetCurrentTimeResult
	return &res, call(m.ProtoReq(), m, &res, c)
}

// AnimationGetCurrentTimeResult Returns the current time of the an animation.
type AnimationGetCurrentTimeResult struct {

	// CurrentTime Current time of the page.
	CurrentTime float64 `json:"currentTime"`
}

// AnimationGetPlaybackRate Gets the playback rate of the document timeline.
type AnimationGetPlaybackRate struct {
}

// ProtoReq of the command
func (m AnimationGetPlaybackRate) ProtoReq() string { return "Animation.getPlaybackRate" }

// Call of the command, sessionID is optional.
func (m AnimationGetPlaybackRate) Call(c Client) (*AnimationGetPlaybackRateResult, error) {
	var res AnimationGetPlaybackRateResult
	return &res, call(m.ProtoReq(), m, &res, c)
}

// AnimationGetPlaybackRateResult Gets the playback rate of the document timeline.
type AnimationGetPlaybackRateResult struct {

	// PlaybackRate Playback rate for animations on page.
	PlaybackRate float64 `json:"playbackRate"`
}

// AnimationReleaseAnimations Releases a set of animations to no longer be manipulated.
type AnimationReleaseAnimations struct {

	// Animations List of animation ids to seek.
	Animations []string `json:"animations"`
}

// ProtoReq of the command
func (m AnimationReleaseAnimations) ProtoReq() string { return "Animation.releaseAnimations" }

// Call of the command, sessionID is optional.
func (m AnimationReleaseAnimations) Call(c Client) error {
	return call(m.ProtoReq(), m, nil, c)
}

// AnimationResolveAnimation Gets the remote object of the Animation.
type AnimationResolveAnimation struct {

	// AnimationID Animation id.
	AnimationID string `json:"animationId"`
}

// ProtoReq of the command
func (m AnimationResolveAnimation) ProtoReq() string { return "Animation.resolveAnimation" }

// Call of the command, sessionID is optional.
func (m AnimationResolveAnimation) Call(c Client) (*AnimationResolveAnimationResult, error) {
	var res AnimationResolveAnimationResult
	return &res, call(m.ProtoReq(), m, &res, c)
}

// AnimationResolveAnimationResult Gets the remote object of the Animation.
type AnimationResolveAnimationResult struct {

	// RemoteObject Corresponding remote object.
	RemoteObject *RuntimeRemoteObject `json:"remoteObject"`
}

// AnimationSeekAnimations Seek a set of animations to a particular time within each animation.
type AnimationSeekAnimations struct {

	// Animations List of animation ids to seek.
	Animations []string `json:"animations"`

	// CurrentTime Set the current time of each animation.
	CurrentTime float64 `json:"currentTime"`
}

// ProtoReq of the command
func (m AnimationSeekAnimations) ProtoReq() string { return "Animation.seekAnimations" }

// Call of the command, sessionID is optional.
func (m AnimationSeekAnimations) Call(c Client) error {
	return call(m.ProtoReq(), m, nil, c)
}

// AnimationSetPaused Sets the paused state of a set of animations.
type AnimationSetPaused struct {

	// Animations Animations to set the pause state of.
	Animations []string `json:"animations"`

	// Paused Paused state to set to.
	Paused bool `json:"paused"`
}

// ProtoReq of the command
func (m AnimationSetPaused) ProtoReq() string { return "Animation.setPaused" }

// Call of the command, sessionID is optional.
func (m AnimationSetPaused) Call(c Client) error {
	return call(m.ProtoReq(), m, nil, c)
}

// AnimationSetPlaybackRate Sets the playback rate of the document timeline.
type AnimationSetPlaybackRate struct {

	// PlaybackRate Playback rate for animations on page
	PlaybackRate float64 `json:"playbackRate"`
}

// ProtoReq of the command
func (m AnimationSetPlaybackRate) ProtoReq() string { return "Animation.setPlaybackRate" }

// Call of the command, sessionID is optional.
func (m AnimationSetPlaybackRate) Call(c Client) error {
	return call(m.ProtoReq(), m, nil, c)
}

// AnimationSetTiming Sets the timing of an animation node.
type AnimationSetTiming struct {

	// AnimationID Animation id.
	AnimationID string `json:"animationId"`

	// Duration Duration of the animation.
	Duration float64 `json:"duration"`

	// Delay Delay of the animation.
	Delay float64 `json:"delay"`
}

// ProtoReq of the command
func (m AnimationSetTiming) ProtoReq() string { return "Animation.setTiming" }

// Call of the command, sessionID is optional.
func (m AnimationSetTiming) Call(c Client) error {
	return call(m.ProtoReq(), m, nil, c)
}

// AnimationAnimationCanceled Event for when an animation has been cancelled.
type AnimationAnimationCanceled struct {

	// ID Id of the animation that was cancelled.
	ID string `json:"id"`
}

// ProtoEvent interface
func (evt AnimationAnimationCanceled) ProtoEvent() string {
	return "Animation.animationCanceled"
}

// AnimationAnimationCreated Event for each animation that has been created.
type AnimationAnimationCreated struct {

	// ID Id of the animation that was created.
	ID string `json:"id"`
}

// ProtoEvent interface
func (evt AnimationAnimationCreated) ProtoEvent() string {
	return "Animation.animationCreated"
}

// AnimationAnimationStarted Event for animation that has been started.
type AnimationAnimationStarted struct {

	// Animation Animation that was started.
	Animation *AnimationAnimation `json:"animation"`
}

// ProtoEvent interface
func (evt AnimationAnimationStarted) ProtoEvent() string {
	return "Animation.animationStarted"
}
